
Program 1: Determining whether two line segments are intersected
package main;

import java.util.HashMap;
import java.util.Map;

class Point {

    int x;
    int y;

    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
};

class LineIntersection {

    public boolean segmentIntersects(Point p1, Point p2, Point p3, Point p4) {
        int direction1 = this.direction(p3, p4, p1);
        int direction2 = this.direction(p3, p4, p2);
        int direction3 = this.direction(p1, p2, p3);
        int direction4 = this.direction(p1, p2, p4);

        if (((direction1 > 0 && direction2 < 0) || (direction1 < 0 && direction2 > 0)) && ((direction3 > 0 && direction4 < 0) || (direction3 < 0 && direction4 > 0))) {
            return true;
        } else if (direction1 == 0 && this.onSegments(p3, p4, p1)) {
            return true;
        } else if (direction2 == 0 && this.onSegments(p3, p4, p2)) {
            return true;
        } else if (direction3 == 0 && this.onSegments(p1, p2, p3)) {
            return true;
        } else if (direction4 == 0 && this.onSegments(p1, p2, p4)) {
            return true;
        }
        return false;
    }

    // is C is clockwise or anti-clockwise from line ab
    public static int direction(Point a, Point b, Point c) {
        int val = (b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y);
        return val;
    }

    public static boolean onSegments(Point a, Point b, Point c) {
        // Line is ab, c is or not middle of them
        if (c.x >= Math.min(a.x, b.x) && (c.x <= Math.max(a.y, b.y)) && (c.y >= Math.min(a.y, b.y)) && (c.y <= Math.max(a.y, b.y))) {
            return true;
        }
        return false;
    }
}

public class Main {

    public static void main(String[] args) {
        //  line 1 = {{0,0}, {5, 5}};
        //  line 2 = {{2,-10}, {3, 10}};
        LineIntersection lineIntersection = new LineIntersection();
        boolean isLineIntersected = lineIntersection.segmentIntersects(new Point(0, 0), new Point(5, 5), new Point(2, -10), new Point(3, 10));
        if (isLineIntersected) {
            System.out.println("Line is intersected");
        } else {
            System.out.println("Line is not intersected");
        }
    }

}
Output:
Line is intersected

:END

Program 2 : Determining whether any pair of Segments intersect: Sweep Line Algorithm
package ds_algo_github;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

class LineIntersection {

    public boolean segmentIntersects(Point p1, Point p2, Point p3, Point p4) {
        int direction1 = this.direction(p3, p4, p1);
        int direction2 = this.direction(p3, p4, p2);
        int direction3 = this.direction(p1, p2, p3);
        int direction4 = this.direction(p1, p2, p4);

        if (((direction1 > 0 && direction2 < 0) || (direction1 < 0 && direction2 > 0)) && ((direction3 > 0 && direction4 < 0) || (direction3 < 0 && direction4 > 0))) {
            return true;
        } else if (direction1 == 0 && this.onSegments(p3, p4, p1)) {
            return true;
        } else if (direction2 == 0 && this.onSegments(p3, p4, p2)) {
            return true;
        } else if (direction3 == 0 && this.onSegments(p1, p2, p3)) {
            return true;
        } else if (direction4 == 0 && this.onSegments(p1, p2, p4)) {
            return true;
        }
        return false;
    }

    // is C is clockwise or anti-clockwise from line ab
    public static int direction(Point a, Point b, Point c) {
        int val = (b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y);
        return val;
    }

    public static boolean onSegments(Point a, Point b, Point c) {
        // Line is ab, c is or not middle of them
        if (c.x >= Math.min(a.x, b.x) && (c.x <= Math.max(a.y, b.y)) && (c.y >= Math.min(a.y, b.y)) && (c.y <= Math.max(a.y, b.y))) {
            return true;
        }
        return false;
    }

    boolean segmentIntersects(Line lineA, Line lineB) {
        System.out.println("[" + lineA + " , " + lineB + "]");

        return this.segmentIntersects(
                new Point(lineA.startX, lineA.startY),
                new Point(lineA.endX, lineA.endY),
                new Point(lineB.startX, lineB.startY),
                new Point(lineB.endX, lineB.endY)
        );
    }
}

class Line {

    public int startX;
    public int startY;
    public int endX;
    public int endY;

    public Line(int startX, int startY, int endX, int endY) {
        this.startX = startX;
        this.startY = startY;
        this.endX = endX;
        this.endY = endY;
    }

    @Override
    public boolean equals(Object l) {
        Line otherLine = (Line) l;
        if (l == this) {
            return true;
        }
        if (!(l instanceof Line)) {
            return false;
        }
        if ((this.startX == otherLine.startX)
                && (this.startY == otherLine.startY)
                && (this.endX == otherLine.endX)
                && (this.endY == otherLine.endY)) {
            return true;
        }
        return false;
    }

    public String toString() {
        return " {" + "(" + this.startX + "," + this.startY + ")," + "(" + this.endX + "," + this.endY + ")" + "} ";
    }
}

class Point implements Comparable<Point> {

    public int x;
    public int y;
    public boolean isStart;
    public Line belongedLine;

    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public Point(int x, int y, boolean isStart, Line belongedLine) {
        this.x = x;
        this.y = y;
        this.isStart = isStart;
        this.belongedLine = belongedLine;
    }

    //sort in ascending order by x first, then y
    @Override
    public int compareTo(Point o) {
        if (this.x == o.x) {
            return (this.y - o.y);
        } else {
            return (this.x - o.x);
        }
    }

    @Override
    public boolean equals(Object p) {
        Point castedPoint = (Point) p;
        return this.belongedLine.equals(castedPoint.belongedLine);
    }

    @Override
    public String toString() {
        return "(" + this.x + "," + this.y + ")";
    }
}

class ActivePointSegments {

    public Point[] points;
    public int currentPointsNumber;

    public ActivePointSegments(int maxPoint) {
        this.points = new Point[maxPoint];
        this.currentPointsNumber = 0;
    }

    public void insert(Point p) {
        this.points[this.currentPointsNumber++] = p;
        Arrays.sort(this.points, 0, this.currentPointsNumber, (i, j) -> (i.y - j.y));
    }

    public void delete(Point p) {
        boolean copyNextPointToCurrentPosition = false;
        for (int i = 0; i < this.currentPointsNumber; i++) {
            Point currentPoint = this.points[i];
            if (copyNextPointToCurrentPosition || currentPoint.equals(p)) {
                copyNextPointToCurrentPosition = true;
                this.points[i] = this.points[i + 1];
            }
        }
        if (copyNextPointToCurrentPosition) {
            this.currentPointsNumber--;
        }
    }

    public Point upperSegment(Point p) {
        int currentSegmentPosition = this.currentSegmentPosition(p);
        if (currentSegmentPosition < (this.currentPointsNumber - 1)) {
            return this.points[currentSegmentPosition + 1];
        }
        return null;
    }

    public Point lowerSegment(Point p) {
        int currentSegmentPosition = this.currentSegmentPosition(p);

        if (currentSegmentPosition > 0) {
            return this.points[currentSegmentPosition - 1];
        }
        return null;
    }

    private int currentSegmentPosition(Point p) {
        int currentSegmentPosition = -1;
        for (int i = 0; i < this.currentPointsNumber; i++) {
            Point currentPoint = this.points[i];
            if (currentPoint.equals(p)) {
                currentSegmentPosition = i;
                break;
            }
        }
        return currentSegmentPosition;
    }
}

class SweepLine {

    private Line[] lines;
    private LineIntersection lineIntersection;
    private int currentLineNumbers;
    private int maxLines;

    public SweepLine(int maxLines) {
        this.lines = new Line[maxLines];
        this.maxLines = maxLines;
        this.currentLineNumbers = 0;
        this.lineIntersection = new LineIntersection();
    }

    public void insert(Line l) {
        if (this.currentLineNumbers < this.maxLines) {
            lines[this.currentLineNumbers++] = l;
        }
    }

    public boolean anySegmentsIntersect() {
        Point[] points = new Point[this.currentLineNumbers * 2];
        Point px;
        Line l;
        int j = -1;

        for (int i = 0; i < this.currentLineNumbers; i++) {
            l = this.lines[i];
            points[++j] = new Point(l.startX, l.startY, true, l);
            points[++j] = new Point(l.endX, l.endY, false, l);
        }
        //System.out.println("UnSorted Points:" + Arrays.toString(points));

        // now sort the points according to X coordinate,then y
        Arrays.sort(points);
        System.out.println("Sorted Points:" + Arrays.toString(points));

        boolean isAnySegmentIntersected = this.anySegmentsIntersect(points);
        if (isAnySegmentIntersected) {
            System.out.println("Intersected");
        } else {
            System.out.println("Not Intersected");
        }
        return isAnySegmentIntersected;
    }

    private boolean anySegmentsIntersect(Point[] points) {
        ActivePointSegments activePointSegments = new ActivePointSegments(this.maxLines * 2);
        for (int i = 0; i < points.length; i++) {
            Point p = points[i];
            Line currentLine = p.belongedLine;
            if (p.isStart) {
                activePointSegments.insert(p);
                Point upperPoint = activePointSegments.lowerSegment(p);
                Point belowPoint = activePointSegments.upperSegment(p);
                if ((upperPoint != null && lineIntersection.segmentIntersects(currentLine, upperPoint.belongedLine))
                        || (belowPoint != null && lineIntersection.segmentIntersects(currentLine, belowPoint.belongedLine))) {
                    return true;
                }
            } else {
                Point upperPoint = activePointSegments.lowerSegment(p);
                Point belowPoint = activePointSegments.upperSegment(p);
                activePointSegments.delete(p);
                if (upperPoint != null && belowPoint != null && lineIntersection.segmentIntersects(upperPoint.belongedLine, belowPoint.belongedLine)) {
                    return true;
                }
            }
        }
        return false;
    }

}

public class MainDriver {

    public static void main(String[] args) {
        SweepLine swl = new SweepLine(15);
        swl.insert(new Line(1, 6, 4, 5));
        swl.insert(new Line(1, 4, 3, 5));
        swl.insert(new Line(2, 3, 5, 2));
        swl.insert(new Line(4, 3, 8, 5));
        swl.insert(new Line(5, 5, 6, 4)); //till now not intersected
        //swl.anySegmentsIntersect();
        swl.insert(new Line(6, 5, 8, 3)); //now intersected
        swl.anySegmentsIntersect();

    }

}
Output:
[ {(1,6),(4,5)}  ,  {(1,4),(3,5)} ]
[ {(2,3),(5,2)}  ,  {(1,4),(3,5)} ]
[ {(2,3),(5,2)}  ,  {(1,6),(4,5)} ]
[ {(4,3),(8,5)}  ,  {(2,3),(5,2)} ]
[ {(4,3),(8,5)}  ,  {(1,6),(4,5)} ]
[ {(5,5),(6,4)}  ,  {(4,3),(8,5)} ]
[ {(6,5),(8,3)}  ,  {(4,3),(8,5)} ]
Intersected


Program 3: Finding convex hull using graham scans algorithm
package main;

import java.util.Scanner;
import java.util.Arrays;
import java.util.Stack;

class Point implements Comparable<Point> {

    public int x;
    public int y;
    public boolean isStart;

    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public Point(int x, int y, boolean isStart) {
        this.x = x;
        this.y = y;
        this.isStart = isStart;
    }

    //sort in ascending order by x first, then y
    @Override
    public int compareTo(Point o) {
        if (this.x == o.x) {
            return (this.y - o.y);
        } else {
            return (this.x - o.x);
        }
    }

    @Override
    public String toString() {
        return "(" + this.x + "," + this.y + ")";
    }
}

class ConvexHull {

    private Point[] points;
    private int maxPoint;
    private int currentPointsNumber;

    public ConvexHull(int maxPoint) {
        this.points = new Point[maxPoint];
        this.maxPoint = maxPoint;
        this.currentPointsNumber = 0;
    }

    public void insert(Point p) {
        this.points[this.currentPointsNumber++] = p;
    }

    public void delete(Point p) {
        boolean copyNextPointToCurrentPosition = false;
        for (int i = 0; i < this.currentPointsNumber; i++) {
            Point currentPoint = this.points[i];
            if (copyNextPointToCurrentPosition || currentPoint.equals(p)) {
                copyNextPointToCurrentPosition = true;
                this.points[i] = this.points[i + 1];
            }
        }
        if (copyNextPointToCurrentPosition) {
            this.currentPointsNumber--;
        }
    }

    public void grahamScan() {
        // sort points first according to y and then x
        Arrays.sort(this.points, 0, this.currentPointsNumber, (i, j) -> {
            if (i.y == j.y) {
                return (i.x - j.x);
            } else {
                return (i.y - j.y);
            }
        });
        //Arrays.sort(this.points, 0, this.currentPointsNumber, (i, j) -> (i.y == j.y) ? (i.x - j.x) : (i.y - j.y));

        // sort again from index 2 by polar angle, if same polar angle found take the furthest and remove others
        Point[] ps = this.sortedArrayByPolarAngle(Arrays.copyOfRange(this.points, 1, this.currentPointsNumber));

        Stack<Point> s = new Stack<>();
        s.push(this.points[0]);
        s.push(ps[0]);
        s.push(ps[1]);
        // applying left right rule
        for (int i = 2; i < ps.length; i++) {
            while (rightTurn(s.get(s.size() - 1), s.get(s.size() - 2), ps[i])) {
                s.pop();
            }
            s.push(ps[i]);
        }

        // s is now containing points that made up convex hull
        System.out.println(s.toString());
    }

    // test for clockwise and anti-clockwise, then return result
    private boolean rightTurn(Point a, Point b, Point c) {
        int val = (b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y);
        return val > 0;
    }

    private Point[] sortedArrayByPolarAngle(Point[] ps) {
        //System.out.println(Arrays.toString(ps));
        int j = 0;//for next element  
        for (int i = 0; i < ps.length - 1; i++) {
            if (Math.atan2(ps[i].x, ps[i].y) != Math.atan2(ps[i + 1].x, ps[i + 1].y)) {
                ps[j++] = ps[i];
            }
        }
        ps[j++] = ps[ps.length - 1];
//        for (int i = 0; i < j; i++) {
//            System.out.print(" " + ps[i]);
//        }
        Arrays.sort(ps, 0, j, (a, b) -> {
            if (Math.atan2(a.x, a.y) - Math.atan2(b.x, b.y) > 0) {
                return 1;
            } else {
                return -1;
            }
        });
//        System.out.println("");
//        for (int i = 0; i < j; i++) {
//            System.out.print(" " + ps[i]);
//        }
        return Arrays.copyOfRange(ps, 0, j);
    }
}

public class Main {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        ConvexHull cvh = new ConvexHull(50);
        // {0, 3}, {1, 1}, {2, 2}, {4, 4},{0, 0}, {1, 2}, {3, 1}, {3, 3}
        cvh.insert(new Point(0, 3));
        cvh.insert(new Point(1, 1));
        cvh.insert(new Point(2, 2));
        cvh.insert(new Point(1, 0));
        cvh.insert(new Point(2, 0));
        cvh.insert(new Point(4, 4));
        cvh.insert(new Point(5, 0));
        cvh.insert(new Point(0, 0));
        cvh.insert(new Point(1, 2));
        cvh.insert(new Point(3, 1));
        cvh.insert(new Point(3, 3));
        cvh.grahamScan();
    }
}
output:
[(0,0), (0,3), (4,4), (5,0)]
:END


Program 4: Finding the Closest Pair of Points
package main;

import java.awt.Point;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Stack;

class Pair {

    private Point a;
    private Point b;
    private double distance;

    public Pair(Point a, Point b) {
        this.a = a;
        this.b = b;
        this.distance = Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
    }

    public double getDistance() {
        return this.distance;
    }

    public String toString() {
        return new StringBuilder()
                .append("[")
                .append("(")
                .append(this.a.x)
                .append(",")
                .append(this.a.y)
                .append(")")
                .append(",")
                .append("(")
                .append(this.b.x)
                .append(",")
                .append(this.b.y)
                .append(")")
                .append("]")
                .append(" ")
                .append("Distance:")
                .append(this.distance)
                .toString();
    }
}

class ClosestPair {

    private List<Point> points;
    private int nPoints;
    private Pair closestPair;

    public ClosestPair(ArrayList<Point> points) {
        this.points = points;
        this.nPoints = points.size();
        this.closestPair = null;
    }

    // brute force method
    public Pair getClosestPairBruteForce() {
        double minLength = Integer.MAX_VALUE;
        for (int i = 0; i < this.nPoints - 1; i++) {
            for (int j = i + 1; j < this.nPoints; j++) {
                Pair pair = new Pair(this.points.get(i), this.points.get(j));
                if (pair.getDistance() < minLength) {
                    minLength = pair.getDistance();
                    this.closestPair = pair;
                }
            }
        }
        return this.closestPair;
    }

    public Pair getClosestPairDivideAndConquer() {
        List<Point> sortedPoints = this.points;
        Collections.sort(sortedPoints, (o1, o2) -> Integer.signum(o1.x - o2.x));
        return divideAndConquerAux(sortedPoints);
    }

    private Pair divideAndConquerAux(List<Point> points) {
        int N = points.size();
        if (N <= 3) {
            return bruteForce(points);
        }
        int mid = N / 2;
        Point midPoint = points.get(mid);

        Pair bl = divideAndConquerAux(points.subList(0, mid));
        Pair br = divideAndConquerAux(points.subList(mid, N));

        Pair closestSoFar = bl;
        if (br.getDistance() < bl.getDistance()) {
            closestSoFar = br;
        }

        List<Point> strip = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            if (Math.abs(points.get(i).x - midPoint.x) < closestSoFar.getDistance()) {
                strip.add(points.get(i));
            }
        }

        return bestWithStrip(strip, closestSoFar);
    }

    private Pair bestWithStrip(List<Point> points, Pair closestSoFar) {
        Pair best = closestSoFar;
        List<Point> sortedPoints = new ArrayList<>(points);
        Collections.sort(sortedPoints, (o1, o2) -> Integer.signum(o1.y - o2.y));

        for (int i = 0; i < points.size(); i++) {
            for (int j = i + 1; j < points.size()
                    && (points.get(j).y - points.get(i).y) < best.getDistance(); j++) {
                Pair stripPair = new Pair(points.get(i), points.get(j));
                if (stripPair.getDistance() < best.getDistance()) {
                    best = stripPair;
                }
            }
        }

        return best;
    }

    // helper method for divide and conquer approach
    private Pair bruteForce(List<Point> points) {
        Pair tempPair = null;
        double minLength = Integer.MAX_VALUE;
        for (int i = 0; i < points.size() - 1; i++) {
            for (int j = i + 1; j < points.size(); j++) {
                Pair pair = new Pair(points.get(i), points.get(j));
                if (pair.getDistance() < minLength) {
                    minLength = pair.getDistance();
                    tempPair = pair;
                }
            }
        }
        return tempPair;
    }

}

public class Main {

    public static void main(String[] args) {
        List<Point> points = new ArrayList<>();
        points.add(new Point(2, 3));
        points.add(new Point(12, 30));
        points.add(new Point(40, 50));
        points.add(new Point(5, 1));
        points.add(new Point(12, 10));
        points.add(new Point(3, 4));

        ClosestPair closest = new ClosestPair((ArrayList<Point>) points);
        Pair p = closest.getClosestPairBruteForce();
        System.out.println(p);
        p = closest.getClosestPairDivideAndConquer();
        System.out.println(p);
    }
}

/* output
[(2,3),(3,4)] Distance:1.4142135623730951
[(2,3),(3,4)] Distance:1.4142135623730951
 */
:END
