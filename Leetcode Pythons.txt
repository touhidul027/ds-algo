Topics: Maths
---------------
7. Reverse Integer
https://leetcode.com/problems/reverse-integer/
V7.1
from typing import List
class Solution:
    def reverse(self, x: int) -> int:
        isNegative = False
        if x < 0:
            isNegative = True
            x = -1 * x
        org = str(x)
        indexLen = len(org) - 1
        revChars = []
        i = 0
        while indexLen >= 0:
            revChars.insert(i,org[indexLen])
            i = i + 1
            indexLen = indexLen - 1
        return self.getReversedNumber(revChars,isNegative)

    def getReversedNumber(self, revChars:List, negative:bool) -> int:
        numFlag = 1
        maxNum = ['2', '1', '4', '7', '4', '8', '3', '6', '4', '7']
        if negative:
            numFlag = -1
            maxNum[9] = '8';
        if len(revChars) > len(maxNum):
            return 0
        elif len(revChars) < len(maxNum):
            return numFlag * self.charArrayToInteger(revChars)
        else:
            l = len(maxNum)
            for i in range(l):
                if maxNum[i] == revChars[i]:
                    continue
                elif maxNum[i] > revChars[i]:
                    return numFlag * self.charArrayToInteger(revChars)
                else:
                    return 0
        return numFlag * self.charArrayToInteger(revChars)

    def charArrayToInteger(self, arr:List) -> int:
        str = ''.join(arr)
        number = int(str)
        return number

x = -12345
obj = Solution()
number = obj.reverse(x)
print(number)


Topics: Tree
---------------------
226. Invert Binary Tree
https://leetcode.com/problems/invert-binary-tree/
V226.1
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def invertTree(self, root: TreeNode) -> TreeNode:
        if root is None:
            return root
        tempNode = root.left
        root.left = root.right
        root.right = tempNode
        root.left = self.invertTree(root.left)
        root.right = self.invertTree(root.right)
        return root

Topics: Greedy
---------------------
455. Assign Cookies
https://leetcode.com/problems/assign-cookies/
V455.1
START:
class Solution:
    def findContentChildren(self, g: List[int], s: List[int]) -> int:
        g.sort();
        s.sort()
        gLen = len(g)
        sLen = len(s)
        currentCookieIndex = 0
        contentChildNumber = 0
        i = 0
        while i < gLen and currentCookieIndex < sLen:
            if g[i] <= s[currentCookieIndex]:
                contentChildNumber = contentChildNumber + 1
                currentCookieIndex = currentCookieIndex + 1
            else:
                currentCookieIndex = currentCookieIndex + 1
                i = i-1
            i = i + 1
        return contentChildNumber
:END

Topics: HashTable
---------------------
205. Isomorphic Strings
https://leetcode.com/problems/isomorphic-strings/
V205.1
START:
class Solution:
    def isIsomorphic(self, s: str, t: str) -> bool:
        sMap = {}
        tMap = {}
        length = len(s)
        for i in range(length):
            sCh = s[i]
            tCh = t[i]
            if sCh in sMap:
                if tCh != sMap[sCh]:
                    return False
            elif tCh in tMap:
                return False
            else:
                sMap[sCh] = tCh
                tMap[tCh] = sCh
        return True
:END


Topics: Binary Search
---------------------
278. First Bad Version
https://leetcode.com/problems/first-bad-version/
V278.1 Time Limit excede
START:
class Solution:
    def firstBadVersion(self, n):
        lastGoodVersion = 0
        lastBadVersion = n
        while (lastBadVersion - lastGoodVersion) != 1:
            n = lastGoodVersion + (lastBadVersion - lastGoodVersion) / 2
            isBad = isBadVersion(n)
            if isBad:
                lastBadVersion = n
            else:
                lastGoodVersion = n
        return lastBadVersion
:END

V278.2 Accepted
START:
class Solution:
# The isBadVersion API is already defined for you.
# @param version, an integer
# @return an integer
# def isBadVersion(version):

class Solution:
    def firstBadVersion(self, n):
        left = 1
        right = n
        while left < right:
            mid = left + int((right - left) / 2)
            isBad = isBadVersion(mid)
            if isBad:
                right = mid
            else:
                left = mid + 1

        return left
:END

Topics: Breadth-First-Search
----------------------------
993. Cousins in Binary Tree
https://leetcode.com/problems/cousins-in-binary-tree/
V993.1
START:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from queue import Queue
class Solution:
    def isCousins(self, root: TreeNode, x: int, y: int) -> bool:
        q = Queue(maxsize = 100)
        q.put(root)
        executeLoop = True
        isCousins = False
        while executeLoop:
            currentLevelNodesNumber = q.qsize()
            if currentLevelNodesNumber == 0:
                break;

            for i in range(currentLevelNodesNumber):
                curNode = q.get();
                tArr = [];

                leftNode = curNode.left;
                if leftNode:
                    q.put(leftNode);
                    tArr.append(leftNode.val)

                rightNode = curNode.right;
                if rightNode:
                    q.put(rightNode);
                    tArr.append(rightNode.val)

                if executeLoop == False and self.isValueExists(tArr, x, y):
                    return True;
                elif self.isValueExists(tArr, x, y):
                    executeLoop = False; # perform search only in this level
        return isCousins

    def isValueExists(self, tArr: List, x: int, y: int) -> bool:
        for num in tArr:
            if num == x or num == y:
                return True;
        return False
V993.2 try recursively
V993.3 try using dfs
:END

Topics: Sort
----------------------------
1528. Shuffle String
https://leetcode.com/problems/shuffle-string/
V1528.1
START:
class Solution:
    def restoreString(self, s: str, indices: List[int]) -> str:
        length = len(indices)
        newS = list(s)
        for i in range(length):
            newS[indices[i]] = s[i]

        return ''.join(newS)

:END

Topics: Two Pointers
----------------------------
1800. Maximum Ascending Subarray Sum
https://leetcode.com/problems/maximum-ascending-subarray-sum/
V1800.1
START:
class Solution:
    def maxAscendingSum(self, nums: List[int]) -> int:
        maxSum = 0
        tempSum = nums[0]
        numsLen = len(nums)

        for i in range(1, numsLen):
            if nums[i] > nums[i-1]:
                tempSum += nums[i]
            else:
                maxSum = max(maxSum,tempSum)
                tempSum = nums[i]
        return max(maxSum,tempSum)
:END

Topics: Backtracking
----------------------------
1688. Count of Matches in Tournament
https://leetcode.com/problems/count-of-matches-in-tournament/
V1688.1
START:
class Solution:
    def numberOfMatches(self, n: int) -> int:
        if n == 1:
            return 0
        elif n == 2:
            return 1
        return 1 + self.numberOfMatches(n-1)
:END

Topics: Stack
----------------------------
1021. Remove Outermost Parentheses
https://leetcode.com/problems/remove-outermost-parentheses/
V1021.1
START:
class Solution:
    def removeOuterParentheses(self, S: str) -> str:
        sNew = ""
        stack = []
        sLen = len(S)
        startCh = '('
        endCh = ')'
        stack.append(S[0])
        for i in range(1,sLen):
            ch = S[i]
            if ch == startCh:
                if len(stack) != 0:
                    sNew += startCh
                stack.append(ch)
            else:
                stack.pop()
                if len(stack) != 0:
                    sNew += endCh
        return sNew
:END


Topics: Design
----------------------------
1603. Design Parking System
https://leetcode.com/problems/design-parking-system/
1603.1
START:
class ParkingSystem:

    def __init__(self, big: int, medium: int, small: int):
        self.big = big
        self.medium = medium
        self.small = small

    def addCar(self, carType: int) -> bool:
        isSlotsAvailable = False

        if carType == 1:
            if self.big > 0:
                self.big -= 1
                isSlotsAvailable = True
        elif carType == 2:
            if self.medium > 0:
                self.medium -= 1
                isSlotsAvailable = True
        else:
            if self.small > 0:
                self.small -= 1
                isSlotsAvailable = True

        return isSlotsAvailable


# Your ParkingSystem object will be instantiated and called as such:
# obj = ParkingSystem(big, medium, small)
# param_1 = obj.addCar(carType)
:END
1603.2 try using dictionary


Topics: Bit Manipulation
Brush Up: https://www.baeldung.com/java-bitwise-operators
----------------------------
1342. Number of Steps to Reduce a Number to Zero
https://leetcode.com/problems/number-of-steps-to-reduce-a-number-to-zero/
v-1342.1
START:
class Solution:
    def numberOfSteps(self, num: int) -> int:
        nSteps = 0

        while num != 0:
            if (num & 1) != 0:
                num -= 1
            else:
                num = num >> 1
            nSteps += 1

        return nSteps
:END

Topics: Graph
----------------------------
997. Find the Town Judge
https://leetcode.com/problems/find-the-town-judge/
v-997.1
START:
class Solution:
    def prepareAdjacencyMatrix(self, N: int, trust: List[List[int]]) -> List[List[int]]:
        # arr = [[0]*cols]*rows
        adjMatrix = [[0 for i in range(N+1)] for j in range(N+1)]
        for i in range(len(trust)):
            adjMatrix[trust[i][0]] [trust[i][0]] = -1;
            for j in range(1,len(trust[i])):
                adjMatrix[trust[i][0]] [trust[i][j]] = 1;
        return adjMatrix

    def findJudge(self, N: int, trust: List[List[int]]) -> int:
        adjMatrix = self.prepareAdjacencyMatrix(N,trust)
        judge = -1

        for i in range(1,(N+1)):
            if adjMatrix[i][i] == 0:
                judge = i
                break

        if judge != -1:
            for i in range(1,(N+1)):
                if i != judge and adjMatrix[i][judge] == 0:
                    return -1
        return judge;
:END
v-997.2 Review


Topics: Heap
----------------------------
1046. Last Stone Weight
https://leetcode.com/problems/last-stone-weight/
v-1046.1
START:
class Solution:
    currentItems = 0

    @staticmethod
    def heapArray(stones: List[int]) -> List[int]:
        heapArray = [0 for i in range(len(stones))];

        # sorting array
        for i in range(len(stones)):
            heapArray = Solution.insertAsHeapArray(heapArray, stones[i]);

        return heapArray

    @staticmethod
    def insertAsHeapArray(arr: List[int], element: int) -> List[int]:
        # finding right place to insert element
        index = Solution.currentItems

        for i in range(Solution.currentItems):
            if arr[i] > element:
                index = i
                break

        # trickle up the rest of array elements
        Solution.currentItems = Solution.currentItems + 1
        for i in range(Solution.currentItems -1, index, -1):
            arr[i] = arr[i-1]

        # insert element in right place
        arr[index] = element
        return arr

    @staticmethod
    def remove(arr: List[int]) -> int:
        if Solution.currentItems == 0:
            return 0
        Solution.currentItems = Solution.currentItems - 1
        return arr[Solution.currentItems]

    @staticmethod
    def isLast() -> bool:
        return Solution.currentItems == 1

    def lastStoneWeight(self, stones: List[int]) -> int:
        heapArr = Solution.heapArray(stones)
        while Solution.currentItems > 1:
            larger = Solution.remove(heapArr)
            smaller = Solution.remove(heapArr)
            if (larger - smaller) > 0:
                Solution.insertAsHeapArray(heapArr, larger-smaller)

        return Solution.remove(heapArr)
:END
v-1046.2 use built in PriorityQ library class


Topics: Linked List
----------------------------
876. Middle of the Linked List
https://leetcode.com/problems/middle-of-the-linked-list/
v-876.1
START:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head: ListNode) -> ListNode:
        mid = head
        jumper = head

        while jumper and jumper.next:
            mid = mid.next
            jumper = jumper.next.next
        return mid
:END


Topics: Recursion
----------------------------
1137. N-th Tribonacci Number
https://leetcode.com/problems/n-th-tribonacci-number/
v-1137.1
START:
class Solution:
    map = {}
    def tribonacci(self, n: int) -> int:
        if n < 3:
            if n == 0:
                return 0;
            elif n == 1 or n == 2:
                return 1;

        if n not in Solution.map:
            Solution.map[n] = self.tribonacci(n - 1) +  self.tribonacci(n - 2) + self.tribonacci(n - 3)

        return Solution.map.get(n)
:END
v-1137.2 Try without recursion

Topics: Union Find
----------------------------
1584. Min Cost to Connect All Points
https://leetcode.com/problems/min-cost-to-connect-all-points/
v-1584.1 MST algorithm using Prims
START:
import sys

class Solution:
    def minCostConnectPoints(self, points: List[List[int]]) -> int:
        nPoints = len(points)
        edgeWeigth = [sys.maxsize for i in range(nPoints)]
        isInMST = [False for i in range(nPoints)]

        # setting starting point at 0
        edgeWeigth[0] = 0;

        for i in range(nPoints):
            # i = 0, u is the first element
            u = Solution.nextVertex(nPoints, edgeWeigth, isInMST)
            if u == -1:
                break

            isInMST[u] = True
            sourceX = points[u][0]
            sourceY = points[u][1]
            for v in range(nPoints):
                desX = points[v][0]
                desY = points[v][1]
                distance = abs(sourceX - desX) + abs(sourceY - desY)
                if u != v and isInMST[v] == False and distance < edgeWeigth[v]:
                    edgeWeigth[v] = distance

        # calculate cost
        minCost = 0
        for i in range(nPoints):
            minCost += edgeWeigth[i]

        return minCost

    @staticmethod
    def nextVertex(nPoints: int, edgeWeigth: List[int], inMST: List[bool]) -> int:
        min = sys.maxsize
        vertexIndex = -1

        for v in range(nPoints):
            if inMST[v] == False and edgeWeigth[v] < min:
                min = edgeWeigth[v]
                vertexIndex = v

        return vertexIndex;
:END
v-1584.2 MST algorithm using Krushkals


Topics: Sliding Window
----------------------------
1052. Grumpy Bookstore Owner
https://leetcode.com/problems/grumpy-bookstore-owner/
v-1052.1
START:
class Solution:
    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:
        satisfiedCustomer = 0
        currentSum = self.getGrumpyCustomer(customers, grumpy, 0, minutes)
        maxSum = currentSum
        lenCustomers = len(customers)
        secretTechniqueStartingIndex = 0

        for i in range(lenCustomers):
            if grumpy[i] == 0:
                satisfiedCustomer += customers[i]

        # finding max only grumpy customers window
        for i in range(1, lenCustomers - minutes + 1):
            if grumpy[i - 1] == 1:
                currentSum -= customers[i - 1]

            if grumpy[i + minutes - 1] == 1:
                currentSum += customers[i + minutes - 1]

            if currentSum > maxSum:
                secretTechniqueStartingIndex = i
                maxSum = currentSum

        # add sliding windows secret ideas extra customer
        for i in range(secretTechniqueStartingIndex, (secretTechniqueStartingIndex + minutes)):
            if (i < lenCustomers) and grumpy[i] == 1:
                satisfiedCustomer += customers[i]

        return satisfiedCustomer;

    def getGrumpyCustomer(self, customers: List[int], grumpy: List[int], startIndex: int, endIndex: int) -> int:
        sum = 0

        for i in range(startIndex, endIndex):
            if i < len(grumpy) and grumpy[i] == 1:
                sum += customers[i]

        return sum;
:END
v-1052.2 //satisfiedCustomer += maxSum;


Topics: Trie
----------------------------
720. Longest Word in Dictionary
https://leetcode.com/problems/longest-word-in-dictionary/
v-720.1
START:
// solution made in java, in python not now: build trie using built in class
:END
v-720.2 Use HashMap/HashSet


Topics: Divide and Conquer
----------------------------
169. Majority Element
Tags: [Arrays, Divide and Conquer, Bit Manipulation]
https://leetcode.com/problems/majority-element/
v-169.1 Divide and Conquer
START:
class Solution:
    
    counting = {}

    def majorityElement(self, nums: List[int]) -> int:
        return self.recMajorityElement(nums, 0, len(nums) - 1)

    def recMajorityElement(self, nums: List[int], start: int, end: int) -> int:
        if start == end:
            # incrementing number count
            if nums[start] in Solution.counting:
                Solution.counting[nums[start]] = Solution.counting.get(nums[start]) + 1
            else:
                Solution.counting[nums[start]] =  1
            return nums[start]

        mid = start + int((end - start) / 2)
        left = self.recMajorityElement(nums, start, mid)
        right = self.recMajorityElement(nums, mid + 1, end)
        number = 0
        if left == right:
            number = left
        else:
            leftCount = 0
            if left in Solution.counting:
                leftCount = Solution.counting.get(left)

            rightCount = 0
            if right in Solution.counting:
                rightCount = Solution.counting.get(right)

            if leftCount > rightCount:
                number = left
            elif rightCount > leftCount:
                number = right

        return number
:END
Exception: [-1,100,2,100,100,4,100]
Accepted but submission wrong answer

v-169.2 Boyer Moore Majority Vote Algorithm
v-169.3 hashmap -> hint: add element and count, if major immediately return
v-169.4 Bit Manipulation


Topics: Segment Tree
----------------------------
307. Range Sum Query - Mutable
Tags: [Binary index Tree, Segment Tree]
https://leetcode.com/problems/range-sum-query-mutable/
v-307.1 Segment Tree
START:
NA - exact Segment Tree implementation. Solved only Java
:END

Topics: Ordered Map
-------------------
846. Hand of Straights
Tags: [Ordered Map]
https://leetcode.com/problems/hand-of-straights/
v-846.1
START:
    from sortedcontainers import SortedDict
class Solution:
    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
         # primary numbering check
        if (len(hand) % groupSize) != 0:
            return False

        tree_map = {}
        for i in range(len(hand)):
            counter = 0
            if hand[i] in tree_map:
                counter = tree_map[hand[i]]
            counter = counter + 1
            tree_map[hand[i]] = counter

        tree_map = SortedDict(tree_map)
        while (True):
            tree_map = self.test(tree_map, groupSize)
            if tree_map is None:
                return False
            elif (len(tree_map) == 0):
                break
        return True

    def test(self, tree_map:List,  groupSize: int) -> List:
        removeKey = [0 for i in range(groupSize)]
        rNum = 0

        for key in tree_map:
            keyCounter = tree_map[key]
            if keyCounter == 1:
                removeKey[rNum] = key
                rNum = rNum + 1
            else:
                tree_map[key] = keyCounter - 1

            nextKey = key + 1

            for i in range(1, groupSize):
                if nextKey in tree_map:
                    keyCounter = tree_map[nextKey]
                    if (keyCounter == 1):
                        removeKey[rNum] = nextKey
                        rNum = rNum + 1
                    else:
                        tree_map[nextKey] = keyCounter - 1
                else:
                    return None

                nextKey = nextKey + 1

            break

        # update tree_map
        for i in range(rNum):
            tree_map.pop(removeKey[i])

        return tree_map
:END

Topics: Queue
----------------------
933. Number of Recent Calls
Tags: []
https://leetcode.com/problems/number-of-recent-calls/
v-933.1 Time Limit Excede
START:
class RecentCounter:
    def __init__(self):
        self.counters = [0 for i in range(10000)]
        self.startIndex = 0;
        self.curIndex = -1;

    def ping(self, t: int) -> int:
        self.curIndex = self.curIndex + 1
        self.counters[self.curIndex] = t
        startCounterValue = t - 3000
        while (self.counters[self.startIndex] < startCounterValue and self.startIndex <= self.curIndex):
            self.startIndex = self.startIndex

        counter = self.curIndex - self.startIndex + 1
        return counter;

# Your RecentCounter object will be instantiated and called as such:
# obj = RecentCounter()
# param_1 = obj.ping(t)
:END
v-933.2 (Solution) Use dequeue
v-933.3 (SolutionDiscussion) Array with Binary Search


Topics: Geometry
----------------------
1266. Minimum Time Visiting All Points
Tags: [Array, Geometry]
https://leetcode.com/problems/minimum-time-visiting-all-points/
v-1266.1
START:
:END


Topics: Line Sweep
----------------------
1288. Remove Covered Intervals
Tags: [Greedy, Sort, Line Sweep]
https://leetcode.com/problems/remove-covered-intervals/
v-1288.1 Brute Force
START:
class Solution:
    def removeCoveredIntervals(self, intervals: List[List[int]]) -> int:
        totalIntervals = len(intervals)

        coveredIntervals = [0 for i in range(len(intervals))]
        for i in range(len(intervals)):
            if coveredIntervals[i] == 1:
                continue

            c = intervals[i][0]
            d = intervals[i][1]
            for j in range( i + 1, len(intervals)):
                if coveredIntervals[j] == 1:
                    continue

                a = intervals[j][0]
                b = intervals[j][1]

                if (c <= a and b <= d):
                    coveredIntervals[j] = 1
                    totalIntervals = totalIntervals - 1
                elif (a <= c and d <= b):
                    coveredIntervals[i] = 1
                    totalIntervals = totalIntervals - 1
                    break

        return totalIntervals
:END
