class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        map = {}
        for index, value in enumerate(nums):
            otherNumber = target - value
            if otherNumber in map:
                return [map[otherNumber], index]
            map[value] = index
        return []
------------------------------------------------------------------
import sys
from typing import List


class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxSum = -sys.maxsize - 1
        arrLen = len(nums)

        for index, value in enumerate(nums):
            tempSum = value
            j = index + 1
            if tempSum > maxSum:
                maxSum = tempSum

            while tempSum > 0 and j < arrLen:
                tempSum += nums[j]
                if tempSum > maxSum:
                    maxSum = tempSum
                j = j + 1
        return maxSum

nums = [-2,1,-3,4,-1,2,1,-5,4]
obj = Solution()
maxSum = obj.maxSubArray(nums)
print(maxSum)

------------------------------------------------------------------
class Solution:
    def romanToInt(self, s: str) -> int:
        sLen = len(s)
        sum = 0
        map = {}
        map["I"] = 1
        map["V"] = 5
        map["X"] = 10
        map["L"] = 50
        map["C"] = 100
        map["D"] = 500
        map["M"] = 1000
        map["IV"] = 4
        map["IX"] = 9
        map["XL"] = 40
        map["XC"] = 90
        map["CD"] = 400
        map["CM"] = 900
        index = 0
        inc = 2;
        while index < sLen:
            key = s[index]
            if index < sLen - 1:
                key = key + s[index+1]
                inc = 2
            if key not in map:
                key = s[index]
                inc = 1
            sum += map[key]
            index += inc

        return sum

str = "MCMXCIV"
obj = Solution()
number = obj.romanToInt(str)
print(number)
-----------------------------------------------
from _ast import List
from typing import List


class Solution:
    def reverse(self, x: int) -> int:
        isNegative = False
        if x < 0:
            isNegative = True
            x = -1 * x
        org = str(x)
        indexLen = len(org) - 1
        revChars = []
        i = 0
        while indexLen >= 0:
            revChars.insert(i,org[indexLen])
            i = i + 1
            indexLen = indexLen - 1
        return self.getReversedNumber(revChars,isNegative)

    def getReversedNumber(self, revChars:List, negative:bool) -> int:
        numFlag = 1
        maxNum = ['2', '1', '4', '7', '4', '8', '3', '6', '4', '7']
        if negative:
            numFlag = -1
            maxNum[9] = '8';
        if len(revChars) > len(maxNum):
            return 0
        elif len(revChars) < len(maxNum):
            return numFlag * self.charArrayToInteger(revChars)
        else:
            l = len(maxNum)
            for i in range(l):
                if maxNum[i] == revChars[i]:
                    continue
                elif maxNum[i] > revChars[i]:
                    return numFlag * self.charArrayToInteger(revChars)
                else:
                    return 0
        return numFlag * self.charArrayToInteger(revChars)

    def charArrayToInteger(self, arr:List) -> int:
        str = ''.join(arr)
        number = int(str)
        return number

x = -12345
obj = Solution()
number = obj.reverse(x)
print(number)
###################################################

Category: DFS
---------------------
100. same Tree
https://leetcode.com/problems/same-tree/
V100.1
START:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        pPath = self.traversePath(p)
        qPath = self.traversePath(q)
        if pPath == qPath:
            return True
        return False

    def traversePath(self, node:TreeNode) -> str:
        if node is None:
            return "N"
        leftNodesPath = self.traversePath(node.left)
        currentValue = node.val
        rightNodesPath = self.traversePath(node.right)
        return leftNodesPath + rightNodesPath + str(currentValue)
:END